{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","rows","columns","playerTurn","moves","resetBoard","setState","winner","getMove","x","y","filter","item","getWinningMoves","xPos","yPos","xVector","yVector","winningMoves","player","delta","checkX","checkY","checkMove","push","checkForWin","velocities","i","length","move","WinningMoves","addMove","nextPlayerTurn","concat","this","rowView","row","columnView","column","piece","onClick","style","width","height","backgroundColor","display","padding","cursor","borderRadius","flex","undefined","flexDirection","position","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontWeight","fontSize","props","Object","assign","styles","container","renderBoard","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95408c77.chunk.js","sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react';\n\nexport default class App extends React.Component {\n\n  //state of class app\n  state = {\n    //rows and columns of the connect 4 board\n    rows: 6,\n    columns: 7,\n    playerTurn: 'red',\n    //moves consist of an x coordinate and y coordinate and colour of current player\n    moves: []\n  };\n\n\n  resetBoard =  () => {\n    this.setState({ moves: [], winner: null });\n  }\n  //function responsible for obtaining the piece at row / column \n  getMove = (x,y) => {\n    const list = this.state.moves.filter((item) => {\n      return (item.x === x && item.y === y);\n    });\n\n    return list[0];\n  }\n\n  //checks omni-directionaly based on values of x and y vector\n  getWinningMoves = (xPos, yPos, xVector, yVector) => {\n    //let x be the x position and let y be the y position\n    const winningMoves =[{x: xPos, y: yPos}];\n    //get the player at xPos, yPos\n    const player = this.getMove(xPos, yPos).player;\n    //for a change in tiles max equal to 3\n    for(let delta = 1; delta <= 3; delta += 1) {\n      //check the X position for four pieces\n      const checkX = xPos + xVector * delta;\n      //check the y position for four pieces\n      const checkY = yPos + yVector * delta;\n      //get the move at the xPos we checked and yPos we checked\n      const checkMove = this.getMove(checkX, checkY);\n      //if the move to the right's player was the same as this moves plater\n      if(checkMove && checkMove.player === player){\n        //push this move into the winning moves array \n        winningMoves.push({x: checkX, y: checkY});\n        //else break the if statement \n      }else{\n        break;\n      }\n    }\n\n    for(let delta = -1; delta >= -3; delta -= 1) {\n\n      const checkX = xPos + xVector * delta;\n\n      const checkY = yPos + yVector * delta;\n\n      const checkMove = this.getMove(checkX, checkY);\n      //if the move to the right's player was the same as this moves plater\n      if(checkMove && checkMove.player === player){\n        //push this move into the winning moves array \n        winningMoves.push({x: checkX, y: checkY});\n        //else break the if statement \n      }else{\n        break;\n      }\n    }\n\n    return winningMoves;\n  }\n\n  //responsible for checking adjacent (left and right) pieces after move and counting to see if the turn is a win\n  checkForWin = (x,y) => {\n    const velocities = [{x: 1, y: 0}, {x: 0, y: 1}, {x: -1, y: 1}, {x: 1, y: 1}]\n\n    for(let i = 0; i < velocities.length; i++){\n\n      const move = velocities[i]\n      const WinningMoves = this.getWinningMoves(x, y, move.x, move.y);\n\n      if(WinningMoves.length > 3){\n        this.setState({winner: this.getMove(x,y).player, WinningMoves});\n\n        //check if 42 moves have been made (board is full)\n      }else if(this.state.moves.length >= 42){\n        //set the state as nobody wins and return the full board\n        this.setState({winner: \"Nobody\"});\n      }\n    }\n  }\n\n\n  //function used to add a move on the board depending on which player's turn\n  addMove = (x,y) => {\n    //player turn is set to 'red' first\n    const { playerTurn } = this.state;\n    //the next turn after current turn if red make yellow, else make red\n    const nextPlayerTurn = playerTurn === 'red' ? 'yellow' : 'red';\n    //add this move to the state and change the player turn\n    this.setState({moves: this.state.moves.concat({ x, y, player: playerTurn }), playerTurn: nextPlayerTurn}, () => this.checkForWin(x, y, playerTurn));\n\n  }\n\n\n//method responsible for rendering the square 6 x 7 board\n  renderBoard(){\n\n    //initializes the number of columns and rows \n    const{ rows, columns, winner } = this.state;\n\n    const rowView = [];\n\n    //renders the number of boards in the connect 4 game\n    for(let row = 0; row < this.state.rows; row += 1){\n      \n      const columnView = [];\n      //renders the number of columns in the connect 4 game\n      for(let column = 0; column < this.state.columns; column += 1){\n        //gets the colour of the piece at row / column \n        const piece = this.getMove(column, row);\n        //pushes and holds the individual columns created for connect 4\n        columnView.push(\n        \n        //creates a dymnamic width and height for each column on the web page and makes the border 'blue', flex throughout for proportionality\n        //creates the background of the game to be white and creates a border radius in its place\n        \n        <div onClick={() => {this.addMove(column, row)}} style={{width: '8vw', height: '8vw', backgroundColor: '#00a8ff', display: 'flex', padding: 5, cursor: 'pointer'}}>\n            <div style={{borderRadius: '50%', backgroundColor: 'white', flex: 1, padding: 3, display: 'flex'}}>\n            {piece ? <div style = {{backgroundColor: piece.player, flex: 1, borderRadius: '50%' }}/> : undefined}    \n        </div>\n      </div>\n        \n        );\n      }\n\n      //sets the length of rows relatie to columns (columnView)\n      rowView.push(\n        <div style={{display: 'flex', flexDirection: 'row'}}>{columnView}</div>\n      );\n    }\n  \n  //parent container of connect 4 \n  return (\n    //square 400 by 400 coloured red\n    //if there is a winner, it will display who won and give the option to reset the board by clicking on it\n    <div style={{backgroundColor: 'red', display: 'flex', flexDirection: 'column' }}>\n      {winner && <div onClick = {this.resetBoard} style = {{ position: 'absolute', left: 0, right: 0, bottom: 0, top: 0, zIndex: 3, backgroundColor: 'rgba(0, 0, 0, .5)', display: 'flex', \n      justifyContent: 'center', alignItems: 'center', color: '#fff', fontWeight: '200', fontSize: '8vw'}}>{`${winner}  WINS `}</div>}\n      {rowView}\n    </div>\n    );\n \n  }\n\n\n  render() {\n   const { style } = this.props;\n\n   return (\n     <div style={style ? Object.assign({}, styles.container, style) : styles.container}>\n       <div>\n       {this.renderBoard()}\n       </div>\n     </div>\n   );\n }\n}\n\nconst styles = {\n  container: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center', \n  }\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}